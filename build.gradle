plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'checkstyle'
	id 'jacoco'

}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.rest-assured:rest-assured:5.3.2'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'jakarta.validation:jakarta.validation-api:3.0.0'
	implementation 'io.projectreactor:reactor-core:3.4.10'
	implementation 'org.apache.logging.log4j:log4j-api:2.14.1'
	implementation 'org.apache.logging.log4j:log4j-core:2.14.1'
	implementation 'jakarta.validation:jakarta.validation-api:3.0.0'
	implementation 'io.projectreactor:reactor-core:3.4.10'



}

checkstyle {
	configFile = file("${project.rootDir}/config/checkstyle/google_checks.xml")
	toolVersion = '10.12.4'
	reportsDir = file("${project.buildDir}/checkstyle")
	showViolations = false
}



tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}
sourceSets {
	integrationTest {
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
		java.srcDir file('src/integrationTest/java')
		resources.srcDir file('src/integrationTest/resources')
	}
}
configurations {
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}
task integrationTest(type: Test) {
	description = 'Runs the integration tests.'
	group = 'verification'
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath

	useJUnitPlatform()
	testLogging {
		events "PASSED", "FAILED", "SKIPPED"
	}
}

sourceSets {
	systemTest {
		java.srcDir file('src/systemTest/java')
		resources.srcDir file('src/systemTest/resources')
		compileClasspath += sourceSets.main.output + sourceSets.test.output
		runtimeClasspath += sourceSets.main.output + sourceSets.test.output
	}
}
configurations {
	systemTestImplementation.extendsFrom testImplementation
	systemTestRuntimeOnly.extendsFrom testRuntimeOnly
}
task systemTest(type: Test) {
	testClassesDirs = sourceSets.systemTest.output.classesDirs
	classpath = sourceSets.systemTest.runtimeClasspath

	useJUnitPlatform()
	testLogging {
		events "PASSED", "FAILED", "SKIPPED"
	}
}


jacoco {
	toolVersion = "0.8.9"
	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}
jacocoTestReport {
	reports {
		xml.required = true
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
		html.required = true
	}
}
task unitTest(type: Test) {
	useJUnitPlatform()
	testLogging {
		events "PASSED", "FAILED", "SKIPPED"
	}
	finalizedBy jacocoTestReport
}


tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}


tasks.withType(Checkstyle) { reports { xml.required =
		false
	html.required =
			false
}}



